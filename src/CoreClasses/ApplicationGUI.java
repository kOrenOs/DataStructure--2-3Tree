/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CoreClasses;

import java.awt.Color;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korenciak.marek
 */
public class ApplicationGUI extends javax.swing.JFrame {

    private ApplicationController AC;

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicationGUI().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        generate = new javax.swing.JButton();
        cadasterNumber = new javax.swing.JTextField();
        minPropList = new javax.swing.JTextField();
        maxPropList = new javax.swing.JTextField();
        minProp = new javax.swing.JTextField();
        maxProp = new javax.swing.JTextField();
        minPerson = new javax.swing.JTextField();
        maxPerson = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        addCadasterButton = new javax.swing.JButton();
        addCadasterTextField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        addNameField = new javax.swing.JTextField();
        addSurnameField = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cadasterAddPersonField = new javax.swing.JTextField();
        propAddPersonField = new javax.swing.JTextField();
        addPersonButton = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        addPropertyListAddressField = new javax.swing.JTextField();
        jPanel32 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        addPropertyListPropertyIDField = new javax.swing.JTextField();
        addPropertyListButton = new javax.swing.JButton();
        addPropertyListCadasterIDField = new javax.swing.JTextField();
        addPropertyListPersonIDField = new javax.swing.JTextField();
        jPanel33 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        addPersonToPropListPersonIDField1 = new javax.swing.JTextField();
        addPersonToPropListCadasterIDField1 = new javax.swing.JTextField();
        addPersonToPropListPropListID1 = new javax.swing.JTextField();
        addPersonToPropListButton1 = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        addPersonToPropListOwnerPartField1 = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        addPropertyCatasterField = new javax.swing.JTextField();
        addPropertyAddressField = new javax.swing.JTextField();
        addPropertyPropertyListIDField = new javax.swing.JTextField();
        addPropertyButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        findCadasterByIDField = new javax.swing.JTextField();
        findCadsterByIDButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        findCadasterByNameField = new javax.swing.JTextField();
        FindCadsterByNameButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        findPropCadaster = new javax.swing.JTextField();
        findPropIDNum = new javax.swing.JTextField();
        findPropButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        findPropertyCadasterOfOwner = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        findPropertyOwnerIDOfOwner = new javax.swing.JTextField();
        findPropOwnerButton = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        findPropertyListCadaster = new javax.swing.JTextField();
        findPropertyListPLID = new javax.swing.JTextField();
        findPropertyListButton = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        findPermAddressOfPersonID = new javax.swing.JTextField();
        findPermAddressOfPersonButton = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        findPermAddressOfPropertyCadFIeld = new javax.swing.JTextField();
        findPermAddressOfPropertyPropIDField = new javax.swing.JTextField();
        findPermAddressOfPropertyButton = new javax.swing.JButton();
        jPanel40 = new javax.swing.JPanel();
        showAllPeopleButton = new javax.swing.JButton();
        jPanel27 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel28 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        changePermAddressPerosnIDField = new javax.swing.JTextField();
        changePermAddressCadasterField = new javax.swing.JTextField();
        changePermAddressPropIDField = new javax.swing.JTextField();
        changePermAddressButton = new javax.swing.JButton();
        jPanel35 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        changeOwnerCadasterField = new javax.swing.JTextField();
        changeOwnerPropListIDField = new javax.swing.JTextField();
        changeOwnerActualOwnerIDFIeld = new javax.swing.JTextField();
        changeOwnerNewOwnerIDFIeld = new javax.swing.JTextField();
        changeOwnerButton = new javax.swing.JButton();
        jLabel47 = new javax.swing.JLabel();
        changeOwnerBackUpPropListIDField = new javax.swing.JTextField();
        jPanel37 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel38 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        deletePropertyListCadasterIDField = new javax.swing.JTextField();
        deletePropertyListPropListIDField = new javax.swing.JTextField();
        deletePropertyListBackUpIDField = new javax.swing.JTextField();
        deletePropertyListButton = new javax.swing.JButton();
        jPanel42 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        deletePropertyCadasterIField = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        deletePropertyPropertyIDField = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        deletePropertyPropertyListIDField = new javax.swing.JTextField();
        deletePropertyButton = new javax.swing.JButton();
        jPanel41 = new javax.swing.JPanel();
        jPanel44 = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        deletePersonPersonIDField = new javax.swing.JTextField();
        deletePersonButton = new javax.swing.JButton();
        jLabel58 = new javax.swing.JLabel();
        deletePersonBackUpPersonIDField = new javax.swing.JTextField();
        jPanel45 = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        jLabel56 = new javax.swing.JLabel();
        deleteCadasterIDField = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        deleteCadasterBackUpField = new javax.swing.JTextField();
        deleteCadasterButton = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        saveFileName = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        loadTextField = new javax.swing.JTextField();
        loadButton = new javax.swing.JButton();
        informField = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTable = new javax.swing.JTable();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Land register office");

        jLabel1.setText("Cadaster number");

        jLabel2.setText("Min property lists per cadaster");

        jLabel3.setText("Max property lists per cadaster");

        jLabel4.setText("Min properties per property list");

        jLabel5.setText("Max properties per property list");

        jLabel6.setText("Min owners per property list");

        jLabel7.setText("Max owners per property list");

        generate.setText("Generate");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        cadasterNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadasterNumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minPropList)
                    .addComponent(cadasterNumber)
                    .addComponent(maxProp, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addComponent(minPerson)
                    .addComponent(maxPerson)
                    .addComponent(minProp)
                    .addComponent(maxPropList))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(generate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cadasterNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minPropList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxPropList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minProp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxProp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(maxPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(generate)
                .addContainerGap(197, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Data generator", jPanel1);

        jLabel8.setText("Cadaster name");

        addCadasterButton.setText("Add cadaster");
        addCadasterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCadasterButtonActionPerformed(evt);
            }
        });

        addCadasterTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCadasterTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)
                        .addGap(93, 93, 93)
                        .addComponent(addCadasterTextField))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(addCadasterButton)
                        .addGap(0, 155, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(addCadasterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addCadasterButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(331, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add cadaster", jPanel5);

        jLabel9.setText("Name");

        jLabel10.setText("Surname");

        addNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNameFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addSurnameField, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(addNameField))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(addNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(addSurnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Address"));

        jLabel11.setText("Cadaster");

        jLabel12.setText("Property ID num");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(35, 35, 35)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cadasterAddPersonField)
                    .addComponent(propAddPersonField))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cadasterAddPersonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(propAddPersonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addPersonButton.setText("Add person");
        addPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersonButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(addPersonButton)
                .addContainerGap(172, Short.MAX_VALUE))
            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addPersonButton)
                .addContainerGap(205, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add person", jPanel6);

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder("New property list"));

        jLabel36.setText("Cadaster ID or name");

        jLabel37.setText("Person ID");

        jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder("New property"));

        jLabel38.setText("Address");

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel31Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addPropertyListAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel31Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(addPropertyListAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder("Exist property"));

        jLabel39.setText("Property ID");

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel32Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(addPropertyListPropertyIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel32Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel39)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel32Layout.createSequentialGroup()
                .addComponent(addPropertyListPropertyIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        addPropertyListButton.setText("Add");
        addPropertyListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPropertyListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel32, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addComponent(jLabel37))
                .addGap(43, 43, 43)
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addPropertyListCadasterIDField)
                    .addComponent(addPropertyListPersonIDField))
                .addContainerGap())
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(addPropertyListButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(addPropertyListCadasterIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(addPropertyListPersonIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addPropertyListButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 152, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add property list", jPanel15);

        jPanel34.setBorder(javax.swing.BorderFactory.createTitledBorder("Add person to property list"));

        jLabel40.setText("Person ID");

        jLabel41.setText("Cadaster ID or name");

        jLabel42.setText("Property list ID");

        addPersonToPropListButton1.setText("Add");
        addPersonToPropListButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersonToPropListButton1ActionPerformed(evt);
            }
        });

        jLabel43.setText("Owner part");

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel34Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel34Layout.createSequentialGroup()
                        .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40)
                            .addComponent(jLabel41))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addPersonToPropListCadasterIDField1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addPersonToPropListPersonIDField1)))
                    .addGroup(jPanel34Layout.createSequentialGroup()
                        .addComponent(jLabel42)
                        .addGap(18, 18, 18)
                        .addComponent(addPersonToPropListPropListID1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(jLabel43)
                        .addGap(18, 18, 18)
                        .addComponent(addPersonToPropListOwnerPartField1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(addPersonToPropListButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(addPersonToPropListPersonIDField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(addPersonToPropListCadasterIDField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPersonToPropListPropListID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42)
                    .addComponent(jLabel43)
                    .addComponent(addPersonToPropListOwnerPartField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPersonToPropListButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel33Layout = new javax.swing.GroupLayout(jPanel33);
        jPanel33.setLayout(jPanel33Layout);
        jPanel33Layout.setHorizontalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel33Layout.setVerticalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel33Layout.createSequentialGroup()
                .addComponent(jPanel34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(269, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add to property list", jPanel33);

        jLabel19.setText("Address");

        jLabel20.setText("Cadaster ID or name");

        jLabel21.setText("Property list ID");

        addPropertyButton.setText("Add property");
        addPropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPropertyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel21))
                .addGap(48, 48, 48)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addPropertyCatasterField)
                    .addComponent(addPropertyAddressField)
                    .addComponent(addPropertyPropertyListIDField))
                .addContainerGap())
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(addPropertyButton)
                .addContainerGap(166, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(addPropertyCatasterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(addPropertyAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(addPropertyPropertyListIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addPropertyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 280, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add property", jPanel16);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add", jPanel3);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Find by ID num"));

        jLabel13.setText("ID num of cadaster");

        findCadasterByIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findCadasterByIDFieldActionPerformed(evt);
            }
        });

        findCadsterByIDButton.setText("Find by ID");
        findCadsterByIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findCadsterByIDButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(findCadasterByIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(findCadsterByIDButton)
                .addGap(0, 178, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(findCadasterByIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(findCadsterByIDButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Find by name"));

        jLabel14.setText("Name of cadaster");

        FindCadsterByNameButton.setText("Find by name");
        FindCadsterByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindCadsterByNameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addComponent(findCadasterByNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(FindCadsterByNameButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(findCadasterByNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(FindCadsterByNameButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 209, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Cadaster", jPanel9);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("... of ID num"));

        jLabel15.setText("Property ID num");

        findPropButton.setText("Find");
        findPropButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPropButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Cadaster name or ID");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(findPropCadaster, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(findPropIDNum))
                .addContainerGap())
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(findPropButton)
                .addContainerGap(181, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findPropCadaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(findPropIDNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(findPropButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("... of owner"));

        jLabel16.setText("Cadaster name or ID");

        jLabel18.setText("Person ID of owner");

        findPropOwnerButton.setText("Find");
        findPropOwnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPropOwnerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(findPropertyCadasterOfOwner)
                    .addComponent(findPropertyOwnerIDOfOwner, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(findPropOwnerButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(findPropertyCadasterOfOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(findPropertyOwnerIDOfOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(findPropOwnerButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 147, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Property", jPanel12);

        jLabel22.setText("Cadaster ID or name");

        jLabel23.setText("Property list ID");

        findPropertyListCadaster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPropertyListCadasterActionPerformed(evt);
            }
        });

        findPropertyListButton.setText("Find");
        findPropertyListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPropertyListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23))
                .addGap(87, 87, 87)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findPropertyListCadaster)
                    .addComponent(findPropertyListPLID))
                .addContainerGap())
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(findPropertyListButton)
                .addContainerGap(187, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(findPropertyListCadaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(findPropertyListPLID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(findPropertyListButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 313, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Property list", jPanel17);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("... of person"));

        jLabel24.setText("Person ID");

        findPermAddressOfPersonButton.setText("Find");
        findPermAddressOfPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPermAddressOfPersonButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(findPermAddressOfPersonID, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(findPermAddressOfPersonButton)
                .addContainerGap(181, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(findPermAddressOfPersonID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(findPermAddressOfPersonButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("... of property"));

        jLabel34.setText("Cadaster ID or name");

        jLabel35.setText("Property ID");

        findPermAddressOfPropertyButton.setText("Find");
        findPermAddressOfPropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPermAddressOfPropertyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addGap(18, 18, 18)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findPermAddressOfPropertyCadFIeld)
                    .addComponent(findPermAddressOfPropertyPropIDField))
                .addContainerGap())
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(findPermAddressOfPropertyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(findPermAddressOfPropertyCadFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(findPermAddressOfPropertyPropIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(findPermAddressOfPropertyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 178, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Perm address", jPanel20);

        showAllPeopleButton.setText("Show all people");
        showAllPeopleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllPeopleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel40Layout = new javax.swing.GroupLayout(jPanel40);
        jPanel40.setLayout(jPanel40Layout);
        jPanel40Layout.setHorizontalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showAllPeopleButton)
                .addContainerGap(310, Short.MAX_VALUE))
        );
        jPanel40Layout.setVerticalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showAllPeopleButton)
                .addContainerGap(393, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Person", jPanel40);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );

        jTabbedPane1.addTab("Find", jPanel2);

        jLabel31.setText("Person ID");

        jLabel32.setText("Cadaster ID or name");

        jLabel33.setText("Property ID");

        changePermAddressButton.setText("Change");
        changePermAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePermAddressButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel29Layout = new javax.swing.GroupLayout(jPanel29);
        jPanel29.setLayout(jPanel29Layout);
        jPanel29Layout.setHorizontalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33))
                .addGap(64, 64, 64)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(changePermAddressCadasterField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(changePermAddressPerosnIDField)
                    .addComponent(changePermAddressPropIDField))
                .addContainerGap())
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(changePermAddressButton)
                .addContainerGap(180, Short.MAX_VALUE))
        );
        jPanel29Layout.setVerticalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(changePermAddressPerosnIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(changePermAddressCadasterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(changePermAddressPropIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(changePermAddressButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addComponent(jPanel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 282, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Change perm address", jPanel28);

        jLabel30.setText("Cadaster ID or name");

        jLabel44.setText("Property list ID");

        jLabel45.setText("Actual owner person ID");

        jLabel46.setText("New owner person ID");

        changeOwnerButton.setText("Change");
        changeOwnerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeOwnerButtonActionPerformed(evt);
            }
        });

        jLabel47.setText("Back-up property list ID");

        javax.swing.GroupLayout jPanel36Layout = new javax.swing.GroupLayout(jPanel36);
        jPanel36.setLayout(jPanel36Layout);
        jPanel36Layout.setHorizontalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel36Layout.createSequentialGroup()
                .addContainerGap(182, Short.MAX_VALUE)
                .addComponent(changeOwnerButton)
                .addGap(176, 176, 176))
            .addGroup(jPanel36Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45)
                    .addComponent(jLabel46)
                    .addComponent(jLabel47))
                .addGap(39, 39, 39)
                .addGroup(jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(changeOwnerCadasterField)
                    .addComponent(changeOwnerPropListIDField)
                    .addComponent(changeOwnerActualOwnerIDFIeld)
                    .addComponent(changeOwnerNewOwnerIDFIeld)
                    .addComponent(changeOwnerBackUpPropListIDField))
                .addContainerGap())
        );
        jPanel36Layout.setVerticalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel36Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(changeOwnerCadasterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(changeOwnerPropListIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(changeOwnerActualOwnerIDFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(changeOwnerNewOwnerIDFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(changeOwnerBackUpPropListIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(changeOwnerButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel35Layout.createSequentialGroup()
                .addComponent(jPanel36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 212, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Change owner", jPanel35);

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4)
        );

        jTabbedPane1.addTab("Change", jPanel27);

        jLabel48.setText("Cadaster ID or name");

        jLabel49.setText("Property list ID");

        jLabel50.setText("Back-up peroperty list ID");

        deletePropertyListButton.setText("Delete");
        deletePropertyListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePropertyListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel39Layout = new javax.swing.GroupLayout(jPanel39);
        jPanel39.setLayout(jPanel39Layout);
        jPanel39Layout.setHorizontalGroup(
            jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel39Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel50)
                    .addComponent(jLabel49)
                    .addComponent(jLabel48))
                .addGap(42, 42, 42)
                .addGroup(jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deletePropertyListCadasterIDField)
                    .addComponent(deletePropertyListPropListIDField)
                    .addComponent(deletePropertyListBackUpIDField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(jPanel39Layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(deletePropertyListButton)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        jPanel39Layout.setVerticalGroup(
            jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel39Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(deletePropertyListCadasterIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49)
                    .addComponent(deletePropertyListPropListIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(deletePropertyListBackUpIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(deletePropertyListButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel38Layout = new javax.swing.GroupLayout(jPanel38);
        jPanel38.setLayout(jPanel38Layout);
        jPanel38Layout.setHorizontalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel38Layout.setVerticalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel38Layout.createSequentialGroup()
                .addComponent(jPanel39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 282, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Delete property list", jPanel38);

        jLabel51.setText("Cadaster ID or name");

        jLabel52.setText("Property ID");

        jLabel53.setText("Property list ID");

        deletePropertyButton.setText("Delete");
        deletePropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePropertyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel43Layout = new javax.swing.GroupLayout(jPanel43);
        jPanel43.setLayout(jPanel43Layout);
        jPanel43Layout.setHorizontalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel43Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel52)
                    .addComponent(jLabel51)
                    .addComponent(jLabel53))
                .addGap(58, 58, 58)
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deletePropertyPropertyListIDField)
                    .addComponent(deletePropertyCadasterIField)
                    .addComponent(deletePropertyPropertyIDField))
                .addContainerGap())
            .addGroup(jPanel43Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(deletePropertyButton)
                .addContainerGap(183, Short.MAX_VALUE))
        );
        jPanel43Layout.setVerticalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel43Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(deletePropertyCadasterIField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(deletePropertyPropertyIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(deletePropertyPropertyListIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(deletePropertyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel42Layout = new javax.swing.GroupLayout(jPanel42);
        jPanel42.setLayout(jPanel42Layout);
        jPanel42Layout.setHorizontalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel42Layout.setVerticalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel42Layout.createSequentialGroup()
                .addComponent(jPanel43, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 282, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Delete property", jPanel42);

        jLabel55.setText("Person ID");

        deletePersonButton.setText("Delete");
        deletePersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePersonButtonActionPerformed(evt);
            }
        });

        jLabel58.setText("Back-up person ID");

        javax.swing.GroupLayout jPanel44Layout = new javax.swing.GroupLayout(jPanel44);
        jPanel44.setLayout(jPanel44Layout);
        jPanel44Layout.setHorizontalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel55)
                    .addComponent(jLabel58))
                .addGap(56, 56, 56)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deletePersonBackUpPersonIDField)
                    .addComponent(deletePersonPersonIDField))
                .addContainerGap())
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(deletePersonButton)
                .addContainerGap(181, Short.MAX_VALUE))
        );
        jPanel44Layout.setVerticalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel55)
                    .addComponent(deletePersonPersonIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel58)
                    .addComponent(deletePersonBackUpPersonIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(deletePersonButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel41Layout = new javax.swing.GroupLayout(jPanel41);
        jPanel41.setLayout(jPanel41Layout);
        jPanel41Layout.setHorizontalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel41Layout.setVerticalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addComponent(jPanel44, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 313, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Delete person", jPanel41);

        jLabel56.setText("Cadaster ID or name");

        jLabel57.setText("Back-up cadaser ID or name");

        deleteCadasterButton.setText("Delete");
        deleteCadasterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCadasterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel46Layout = new javax.swing.GroupLayout(jPanel46);
        jPanel46.setLayout(jPanel46Layout);
        jPanel46Layout.setHorizontalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel56)
                    .addComponent(jLabel57))
                .addGap(33, 33, 33)
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteCadasterBackUpField)
                    .addComponent(deleteCadasterIDField))
                .addContainerGap())
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(deleteCadasterButton)
                .addContainerGap(183, Short.MAX_VALUE))
        );
        jPanel46Layout.setVerticalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel56)
                    .addComponent(deleteCadasterIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel57)
                    .addComponent(deleteCadasterBackUpField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(deleteCadasterButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel45Layout = new javax.swing.GroupLayout(jPanel45);
        jPanel45.setLayout(jPanel45Layout);
        jPanel45Layout.setHorizontalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel45Layout.setVerticalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addComponent(jPanel46, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 313, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Delete cadaster", jPanel45);

        javax.swing.GroupLayout jPanel37Layout = new javax.swing.GroupLayout(jPanel37);
        jPanel37.setLayout(jPanel37Layout);
        jPanel37Layout.setHorizontalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
        );
        jPanel37Layout.setVerticalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
        );

        jTabbedPane1.addTab("Delete", jPanel37);

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Save"));

        jLabel25.setText("File name");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addContainerGap(182, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addGap(181, 181, 181))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(saveFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(saveButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel25.setBorder(javax.swing.BorderFactory.createTitledBorder("Load"));

        jLabel26.setText("File name");

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(loadButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(loadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(loadButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 237, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Save/Load", jPanel23);

        outputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        outputTable.setEnabled(false);
        outputTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(outputTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informField)
                .addContainerGap(998, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informField)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
        if (!(chackIntegerTextField(cadasterNumber) && chackIntegerTextField(minPerson)
                && chackIntegerTextField(maxPerson) && chackIntegerTextField(minProp)
                && chackIntegerTextField(maxProp) && chackIntegerTextField(maxPropList)
                && chackIntegerTextField(minPropList))) {
            setErrorMsg("Incorrect input.");
            return;
        }
        AC.dataGenerate(convertTextField(cadasterNumber),
                convertTextField(minPropList), convertTextField(maxPropList),
                convertTextField(minProp), convertTextField(maxProp),
                convertTextField(minPerson), convertTextField(maxPerson));

        setNormalMsg("Generating done.");
    }//GEN-LAST:event_generateActionPerformed

    private void cadasterNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadasterNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cadasterNumberActionPerformed

    private void addCadasterTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCadasterTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addCadasterTextFieldActionPerformed

    private void addCadasterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCadasterButtonActionPerformed
        try {
            ArrayList<Object> temp = AC.addCadaster(addCadasterTextField.getText());
            setNormalMsg("Cadaster name \"" + temp.get(1) + "\" with IDnum " + temp.get(0) + " created.");
        } catch (DataStructureException e) {
            setErrorMsg(e.getMessage());
        }
    }//GEN-LAST:event_addCadasterButtonActionPerformed

    private void addNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addNameFieldActionPerformed

    private void addPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersonButtonActionPerformed
        if (chackTextField(addNameField) && chackTextField(addSurnameField)) {
            if (chackTextField(cadasterAddPersonField) && chackTextField(propAddPersonField)) {
                if (!chackIntegerTextField(propAddPersonField)) {
                    setErrorMsg("Property ID num must by number.");
                    return;
                }
                try {
                    ArrayList<Object> temp = AC.addPerson(addNameField.getText(), addSurnameField.getText(),
                            cadasterAddPersonField.getText(), convertTextField(propAddPersonField));
                    setNormalMsg("Person with ID " + temp.get(0) + " created with permanent address.");
                } catch (DataStructureException e) {
                    setErrorMsg(e.getMessage());
                    return;
                }
            } else {
                try {
                    ArrayList<Object> temp = AC.addPerson(addNameField.getText(), addSurnameField.getText());
                    setNormalMsg("Person with ID " + temp.get(0) + " created without permanent address.");
                } catch (DataStructureException e) {
                    setErrorMsg(e.getMessage());
                    return;
                }
            }
        } else {
            setErrorMsg("Set nane and surname.");
        }
    }//GEN-LAST:event_addPersonButtonActionPerformed

    private void findCadasterByIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findCadasterByIDFieldActionPerformed

    }//GEN-LAST:event_findCadasterByIDFieldActionPerformed

    private void findCadsterByIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findCadsterByIDButtonActionPerformed
        if (findCadasterByIDField.getText().compareTo("") == 0) {
            ArrayList<ArrayList> temp = AC.getCadasterArrayByID();
            fillTableCadaster(temp);
            setNormalMsg("All (" + temp.size() + ") cadasters were written to the table.");
        } else {
            if (chackIntegerTextField(findCadasterByIDField)) {
                ArrayList<Object> temp = AC.findCadaster(convertTextField(findCadasterByIDField));
                if (temp != null) {
                    fillTableCadaster(temp);
                    setNormalMsg("One object found.");
                } else {
                    setNormalMsg("No cadaster found.");
                }
            } else {
                setErrorMsg("Incorrect input data.");
            }
        }
    }//GEN-LAST:event_findCadsterByIDButtonActionPerformed

    private void FindCadsterByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindCadsterByNameButtonActionPerformed
        if (findCadasterByNameField.getText().compareTo("") == 0) {
            ArrayList<ArrayList> temp = AC.getCadasterArrayByName();
            fillTableCadaster(temp);
            setNormalMsg("All (" + temp.size() + ") cadasters were written to the table.");
        } else {
            if (chackTextField(findCadasterByNameField)) {
                ArrayList<Object> temp = AC.findCadaster(findCadasterByNameField.getText());
                if (temp != null) {
                    fillTableCadaster(temp);
                    setNormalMsg("One object found.");
                } else {
                    setNormalMsg("Cadaster not found.");
                }
            } else {
                setErrorMsg("Incorrect input data.");
            }
        }
    }//GEN-LAST:event_FindCadsterByNameButtonActionPerformed

    private void findPropButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPropButtonActionPerformed
        if (chackTextField(findPropCadaster)) {
            ArrayList<ArrayList> properties = null;
            if (!chackTextField(findPropIDNum)) {
                if (chackIntegerTextField(findPropCadaster)) {
                    try {
                        properties = AC.getPropertyOfCadaster(convertTextField(findPropCadaster));
                    } catch (DataStructureException e) {
                        setErrorMsg(e.getMessage());
                        return;
                    }
                } else {
                    try {
                        properties = AC.getPropertyOfCadaster(findPropCadaster.getText());
                    } catch (DataStructureException e) {
                        setErrorMsg(e.getMessage());
                        return;
                    }
                }
                fillListTableProperty(properties);

                setNormalMsg(properties.size() + " objects found.");

            } else {
                if (chackIntegerTextField(findPropIDNum)) {
                    try {
                        if (chackIntegerTextField(findPropCadaster)) {                                                  ////okontrolovat!!!!!!!!!!
                            properties = AC.findProperty(convertTextField(findPropCadaster), convertTextField(findPropIDNum));
                            fillTableProperty(properties);
                            new PropertyListInfo(properties);
                        } else {
                            properties = AC.findProperty(findPropCadaster.getText(), convertTextField(findPropIDNum));
                            fillTableProperty(properties);
                            new PropertyListInfo(properties);
                        }
                    } catch (DataStructureException e) {
                        setErrorMsg(e.getMessage());
                        return;
                    }
                    setNormalMsg("One object found.");
                } else {
                    setErrorMsg("Incorrect input of property ID.");
                }
            }
        } else {
            setErrorMsg("Please set cadaster ID or name.");
        }
    }//GEN-LAST:event_findPropButtonActionPerformed

    private void findPropOwnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPropOwnerButtonActionPerformed
        ArrayList<ArrayList> properties = null;
        if (chackTextField(findPropertyCadasterOfOwner)) {
            if (chackTextField(findPropertyOwnerIDOfOwner)) {
                try {
                    if (chackIntegerTextField(findPropertyCadasterOfOwner)) {
                        properties = AC.findPropertyOfOwner(findPropertyOwnerIDOfOwner.getText(), convertTextField(findPropertyCadasterOfOwner));
                    } else {
                        properties = AC.findPropertyOfOwner(findPropertyOwnerIDOfOwner.getText(), findPropertyCadasterOfOwner.getText());
                    }
                    fillListTableProperty(properties);
                } catch (DataStructureException e) {
                    setErrorMsg(e.getMessage());
                    return;
                }
                setNormalMsg(properties.size() + " objects found.");
            } else {
                setErrorMsg("Please set owner ID.");
            }
        } else {
            if (!chackTextField(findPropertyOwnerIDOfOwner)) {
                setErrorMsg("Please set owner ID.");
            } else {
                try {
                    properties = AC.findPropertyOfOwner(findPropertyOwnerIDOfOwner.getText());
                    fillListTableProperty(properties);
                } catch (DataStructureException e) {
                    setErrorMsg(e.getMessage());
                    return;
                }
                setNormalMsg(properties.size() + " objects found.");
            }
        }
    }//GEN-LAST:event_findPropOwnerButtonActionPerformed

    private void addPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPropertyButtonActionPerformed
        if (chackTextField(addPropertyCatasterField) && chackTextField(addPropertyAddressField)
                && chackTextField(addPropertyPropertyListIDField)) {
            if (!chackIntegerTextField(addPropertyPropertyListIDField)) {
                setErrorMsg("Property list ID must by number.");
                return;
            }
            ArrayList<ArrayList> prop = null;

            try {
                if (chackIntegerTextField(addPropertyCatasterField)) {
                    prop = AC.addProperty(convertTextField(addPropertyCatasterField), addPropertyAddressField.getText(), convertTextField(addPropertyPropertyListIDField));
                } else {
                    prop = AC.addProperty(addPropertyCatasterField.getText(), addPropertyAddressField.getText(), convertTextField(addPropertyPropertyListIDField));
                }
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
                return;
            }
            setNormalMsg("Property created with ID " + prop.get(prop.size() - 1).get(1) + ".");

        } else {
            setErrorMsg("Incorrect inpusts.");
        }
    }//GEN-LAST:event_addPropertyButtonActionPerformed

    private void findPropertyListCadasterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPropertyListCadasterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findPropertyListCadasterActionPerformed

    private void findPropertyListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPropertyListButtonActionPerformed
        if (chackTextField(findPropertyListCadaster)) {
            ArrayList<ArrayList> propertyList = null;
            if (!chackTextField(findPropertyListPLID)) {
                try {
                    if (chackIntegerTextField(findPropertyListCadaster)) {
                        propertyList = AC.getPropertyListsOfCadaster(convertTextField(findPropertyListCadaster));
                    } else {
                        propertyList = AC.getPropertyListsOfCadaster(findPropertyListCadaster.getText());
                    }
                    fillListTablePropertyList(propertyList);
                } catch (DataStructureException e) {
                    setErrorMsg(e.getMessage());
                    return;
                }

                setNormalMsg(propertyList.size() + " objects found.");
            } else {
                try {
                    if (chackIntegerTextField(findPropertyListCadaster)) {
                        propertyList = AC.findPropertyList(convertTextField(findPropertyListCadaster), convertTextField(findPropertyListPLID));
                    } else {
                        propertyList = AC.findPropertyList(findPropertyListCadaster.getText(), convertTextField(findPropertyListPLID));
                    }
                    fillTablePropertyList(propertyList);
                    new PropertyListInfo(propertyList);
                } catch (DataStructureException e) {
                    setErrorMsg(e.getMessage());
                    return;
                }

                if (propertyList == null) {
                    setNormalMsg("Property list with this ID not exists.");
                } else {
                    setNormalMsg("One object found.");
                }
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_findPropertyListButtonActionPerformed

    private void outputTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();
        if (model.getColumnName(1).compareTo("Property list ID") == 0 || model.getColumnName(1).compareTo("Property ID") == 0) {
            ArrayList<Object> cadaster = null;
            ArrayList<ArrayList> propertyList = null;
            Integer cadID = null;
            String cadName = null;
            int propListID = 0;
            if (model.getColumnName(1).compareTo("Property ID") == 0) {
                propListID = (Integer) model.getValueAt(outputTable.rowAtPoint(evt.getPoint()), 3);
            } else {
                propListID = (Integer) model.getValueAt(outputTable.rowAtPoint(evt.getPoint()), 1);
            }
            try {
                try {
                    cadName = (String) model.getValueAt(outputTable.rowAtPoint(evt.getPoint()), 0);
                    cadaster = AC.findCadaster(cadName);
                } catch (ClassCastException e) {
                    cadID = (Integer) model.getValueAt(outputTable.rowAtPoint(evt.getPoint()), 0);
                    cadaster = AC.findCadaster(cadID);
                }
                if (cadID == null) {
                    propertyList = AC.findPropertyList(cadName, propListID);
                } else {
                    propertyList = AC.findPropertyList(cadID, propListID);
                }

                //if (cadID != null) {
                new PropertyListInfo(propertyList);
                //}
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
                return;
            }
        }
    }//GEN-LAST:event_outputTableMouseClicked

    private void findPermAddressOfPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPermAddressOfPersonButtonActionPerformed
        if (chackTextField(findPermAddressOfPersonID)) {
            try {
                ArrayList<ArrayList> prop = AC.findPermPAddress(findPermAddressOfPersonID.getText());

                fillTableProperty(prop);
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
                return;
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_findPermAddressOfPersonButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (chackTextField(saveFileName)) {
            if (AC.saveStructure(saveFileName.getText() + ".csv")) {
                setNormalMsg("Save complete.");
            } else {
                setErrorMsg("Save failed.");
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        if (chackTextField(loadTextField)) {
            if (AC.loadStructure(loadTextField.getText() + ".csv")) {
                setNormalMsg("Load complete.");
            } else {
                setErrorMsg("Load failed.");
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void changePermAddressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePermAddressButtonActionPerformed
        if (chackTextField(changePermAddressCadasterField) && chackTextField(changePermAddressPerosnIDField) && chackTextField(changePermAddressPropIDField)) {
            try {
                if (chackIntegerTextField(changePermAddressCadasterField)) {
                    if (AC.changePermAddress(changePermAddressPerosnIDField.getText(),
                            convertTextField(changePermAddressCadasterField), convertTextField(changePermAddressPropIDField))) {
                        setNormalMsg("Permanent address changed.");
                    } else {
                        setNormalMsg("Permanent address not changed.");
                    }
                } else {
                    if (AC.changePermAddress(changePermAddressPerosnIDField.getText(),
                            changePermAddressCadasterField.getText(), convertTextField(changePermAddressPropIDField))) {
                        setNormalMsg("Permanent address changed.");
                    } else {
                        setNormalMsg("Permanent address not changed.");
                    }
                }
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_changePermAddressButtonActionPerformed

    private void findPermAddressOfPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPermAddressOfPropertyButtonActionPerformed
        if (chackTextField(findPermAddressOfPropertyCadFIeld) && chackTextField(findPermAddressOfPropertyPropIDField)) {
            ArrayList<ArrayList> persons = null;
            try {
                if (chackIntegerTextField(findPermAddressOfPropertyCadFIeld)) {
                    persons = AC.findOccupiersOfProperty(convertTextField(findPermAddressOfPropertyCadFIeld), convertTextField(findPermAddressOfPropertyPropIDField));
                } else {
                    persons = AC.findOccupiersOfProperty(findPermAddressOfPropertyCadFIeld.getText(), convertTextField(findPermAddressOfPropertyPropIDField));
                }
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
                return;
            }
            fillListTablePerson(persons);
            setNormalMsg(persons.size()+" objects found.");
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_findPermAddressOfPropertyButtonActionPerformed

    private void addPersonToPropListButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersonToPropListButton1ActionPerformed
        if (chackTextField(addPersonToPropListPersonIDField1) && chackTextField(addPersonToPropListCadasterIDField1)
                && chackTextField(addPersonToPropListPropListID1)) {
            if (chackIntegerTextField(addPersonToPropListCadasterIDField1)) {
                AC.addOwnerToPropertyList(convertTextField(addPersonToPropListCadasterIDField1), convertTextField(addPersonToPropListPropListID1),
                        addPersonToPropListPersonIDField1.getText(), 0.0);
            } else {
                AC.addOwnerToPropertyList(addPersonToPropListCadasterIDField1.getText(), convertTextField(addPersonToPropListPropListID1),
                        addPersonToPropListPersonIDField1.getText(), 0.0);
            }
            setNormalMsg("Person with ID "+addPersonToPropListPersonIDField1.getText()+" was add as owner to property list "
                    + "with ID "+addPersonToPropListPropListID1.getText()+".");
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_addPersonToPropListButton1ActionPerformed

    private void addPropertyListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPropertyListButtonActionPerformed
        if (chackTextField(addPropertyListCadasterIDField) && chackTextField(addPropertyListPersonIDField)) {
            try {
                ArrayList<ArrayList> propList = null;
                if (chackTextField(addPropertyListAddressField)) {
                    if (chackIntegerTextField(addPropertyListCadasterIDField)) {
                        propList = AC.addPropertyListNewProperty(convertTextField(addPropertyListCadasterIDField), addPropertyListPersonIDField.getText(), addPropertyListAddressField.getText());
                    } else {
                        propList = AC.addPropertyListNewProperty(addPropertyListCadasterIDField.getText(), addPropertyListPersonIDField.getText(), addPropertyListAddressField.getText());
                    }
                } else {
                    if (chackTextField(addPropertyListPropertyIDField)) {
                        if (chackIntegerTextField(addPropertyListCadasterIDField)) {
                            propList = AC.addPropertyListExistProperty(convertTextField(addPropertyListCadasterIDField), addPropertyListPersonIDField.getText(), convertTextField(addPropertyListPropertyIDField));
                        } else {
                            propList = AC.addPropertyListExistProperty(addPropertyListCadasterIDField.getText(), addPropertyListPersonIDField.getText(), convertTextField(addPropertyListPropertyIDField));
                        }
                    } else {
                        setErrorMsg("Incorrect inputs.");
                    }
                }
                setNormalMsg("Property list created with ID " + propList.get(0).get(2) + ".");
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_addPropertyListButtonActionPerformed

    private void changeOwnerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeOwnerButtonActionPerformed
        if (chackTextField(changeOwnerCadasterField) && chackTextField(changeOwnerPropListIDField) && chackTextField(changeOwnerActualOwnerIDFIeld)) {
            ArrayList<ArrayList> propList = null;
            try {
                if (chackTextField(changeOwnerNewOwnerIDFIeld)) {
                    if (chackIntegerTextField(changeOwnerCadasterField)) {
                        propList = AC.changeOwnerOfPropertyList(convertTextField(changeOwnerCadasterField),
                                convertTextField(changeOwnerPropListIDField), changeOwnerActualOwnerIDFIeld.getText(), changeOwnerNewOwnerIDFIeld.getText());
                    } else {
                        propList = AC.changeOwnerOfPropertyList(changeOwnerCadasterField.getText(),
                                convertTextField(changeOwnerPropListIDField), changeOwnerActualOwnerIDFIeld.getText(), changeOwnerNewOwnerIDFIeld.getText());
                    }
                } else {
                    if (chackIntegerTextField(changeOwnerCadasterField)) {
                        if (chackTextField(changeOwnerBackUpPropListIDField)) {
                            propList = AC.deleteOwnerOfPropertyList(convertTextField(changeOwnerCadasterField), convertTextField(changeOwnerPropListIDField),
                                    changeOwnerActualOwnerIDFIeld.getText(), convertTextField(changeOwnerBackUpPropListIDField));
                        } else {
                            propList = AC.deleteOwnerOfPropertyList(convertTextField(changeOwnerCadasterField), convertTextField(changeOwnerPropListIDField),
                                    changeOwnerActualOwnerIDFIeld.getText(), null);
                        }
                    } else {
                        if (chackTextField(changeOwnerBackUpPropListIDField)) {
                            propList = AC.deleteOwnerOfPropertyList(changeOwnerCadasterField.getText(), convertTextField(changeOwnerPropListIDField),
                                    changeOwnerActualOwnerIDFIeld.getText(), convertTextField(changeOwnerBackUpPropListIDField));
                        } else {
                            propList = AC.deleteOwnerOfPropertyList(changeOwnerCadasterField.getText(), convertTextField(changeOwnerPropListIDField),
                                    changeOwnerActualOwnerIDFIeld.getText(), null);
                        }
                    }
                }
                setNormalMsg("Change done.");
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_changeOwnerButtonActionPerformed

    private void deletePropertyListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePropertyListButtonActionPerformed
        if (chackTextField(deletePropertyListPropListIDField) && chackTextField(deletePropertyListCadasterIDField)
                && chackTextField(deletePropertyListBackUpIDField)) {
            try {
                if (chackIntegerTextField(deletePropertyListCadasterIDField)) {
                    AC.migrateAllPropertyToAnotherPropertyList(convertTextField(deletePropertyListCadasterIDField),
                            convertTextField(deletePropertyListPropListIDField), convertTextField(deletePropertyListBackUpIDField));
                } else {
                    AC.migrateAllPropertyToAnotherPropertyList(deletePropertyListCadasterIDField.getText(),
                            convertTextField(deletePropertyListPropListIDField), convertTextField(deletePropertyListBackUpIDField));
                }
                setNormalMsg("Property list with ID " + deletePropertyListPropListIDField.getText() + " was deleted and properties "
                        + "were migrate to property list with ID " + deletePropertyListBackUpIDField.getText() + ".");
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_deletePropertyListButtonActionPerformed

    private void showAllPeopleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllPeopleButtonActionPerformed
        ArrayList<ArrayList> people = AC.findAllPeople();
        fillListTablePerson(people);
        setNormalMsg(people.size() + " objects found.");
    }//GEN-LAST:event_showAllPeopleButtonActionPerformed

    private void deletePropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePropertyButtonActionPerformed
        if (chackTextField(deletePropertyCadasterIField) && chackTextField(deletePropertyPropertyIDField) && chackTextField(deletePropertyPropertyListIDField)) {
            try {
//            if (!chackTextField(deletePropertyBackUpField)) {
                if (chackIntegerTextField(deletePropertyCadasterIField)) {
                    AC.deleteProperty(convertTextField(deletePropertyCadasterIField), convertTextField(deletePropertyPropertyIDField),
                            convertTextField(deletePropertyPropertyListIDField));
                } else {
                    AC.deleteProperty(deletePropertyCadasterIField.getText(), convertTextField(deletePropertyPropertyIDField),
                            convertTextField(deletePropertyPropertyListIDField));
                }
                setNormalMsg("Property deleted.");
//            }else {
//                if (chackIntegerTextField(deletePropertyCadasterIField)) {
//
//                } else {
//
//                }
//            }
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_deletePropertyButtonActionPerformed

    private void deletePersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePersonButtonActionPerformed
        if (chackTextField(deletePersonPersonIDField)) {
            try {
                if (chackTextField(deletePersonBackUpPersonIDField)) {
                    AC.deletePersonInternal(deletePersonPersonIDField.getText(), deletePersonBackUpPersonIDField.getText());
                    setNormalMsg("Person with ID " + deletePersonBackUpPersonIDField.getText() + " was deleted and if it was necessary properties "
                            + "was add to person with ID " + deletePersonBackUpPersonIDField.getText() + ".");
                } else {
                    AC.deletePersonInternal(deletePersonPersonIDField.getText(), null);
                    setNormalMsg("Person with ID " + deletePersonBackUpPersonIDField.getText() + " was deleted.");
                }
            } catch (DataStructureException e) {
                setErrorMsg(e.getMessage());
            }
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_deletePersonButtonActionPerformed

    private void deleteCadasterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCadasterButtonActionPerformed
        if (chackTextField(deleteCadasterBackUpField) && chackTextField(deleteCadasterIDField)) {
            if (chackIntegerTextField(deleteCadasterBackUpField)) {
                if (chackIntegerTextField(deleteCadasterIDField)) {
                    AC.deleteCadaster(convertTextField(deleteCadasterIDField), convertTextField(deleteCadasterBackUpField));
                } else {
                    AC.deleteCadaster(deleteCadasterIDField.getText(), convertTextField(deleteCadasterBackUpField));
                }
            } else {
                if (chackIntegerTextField(deleteCadasterIDField)) {
                    AC.deleteCadaster(convertTextField(deleteCadasterIDField), deleteCadasterBackUpField.getText());
                } else {
                    AC.deleteCadaster(deleteCadasterIDField.getText(), deleteCadasterBackUpField.getText());
                }
            }
            setNormalMsg("Cadaster deleted.");
        } else {
            setErrorMsg("Incorrect inputs.");
        }
    }//GEN-LAST:event_deleteCadasterButtonActionPerformed

    public ApplicationGUI() {
        initComponents();
        setLocationRelativeTo(null);
        informField.setVisible(false);

        AC = new ApplicationController();

        AC.dataGenerate(3, 10, 20, 1, 5, 1, 5);

        LinkedList<JTabbedPane> tabbedPanes = new LinkedList<>();
        tabbedPanes.add(jTabbedPane1);
        tabbedPanes.add(jTabbedPane2);
        tabbedPanes.add(jTabbedPane3);
        tabbedPanes.add(jTabbedPane4);
        tabbedPanes.add(jTabbedPane5);

        for (JTabbedPane pane : tabbedPanes) {
            pane.addChangeListener(new ChangeListener() {
                int selected = pane.getSelectedIndex();

                @Override
                public void stateChanged(ChangeEvent e) {
                    if (pane.getSelectedIndex() != selected) {
                        selected = pane.getSelectedIndex();
                        resetInformPanel();
                    }
                }
            });
        }
    }

    /**
     * Skontrolovanie, ci je textove pole naplnene, alebo nie
     */
    private boolean chackTextField(JTextField textField) {
        if (textField.getText().compareTo("") == 0) {
            return false;
        }
        return true;
    }

    /**
     * Skontrolovanie, ci je textove pole naplnene cislami
     */
    private boolean chackIntegerTextField(JTextField textField) {
        if (!chackTextField(textField)) {
            return false;
        }
        try {
            Integer.parseInt(textField.getText());
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    /**
     * Konvertovanie obsahu textoveho pola na cislo
     */
    private Integer convertTextField(JTextField textField) {
        int temp = 0;
        temp = Integer.parseInt(textField.getText());
        return temp;
    }

    /**
     * Zadanie chybovej hlasky na vypis
     */
    private void setErrorMsg(String msg) {
        informField.setText(msg);
        informField.setForeground(Color.red);
        informField.setVisible(true);
    }

    /**
     * Zadanie normalnej hlasky na vypiss
     */
    private void setNormalMsg(String msg) {
        informField.setText(msg);
        informField.setForeground(Color.black);
        informField.setVisible(true);
    }

    /**
     * Zresetuje Label, ktory obsahuje chybove a normalne hlasky
     */
    private void resetInformPanel() {
        informField.setVisible(false);
    }

    /**
     * Naplenie tabulky vstupom, ktory je pole nehnutelnosti
     */
    private void fillListTableProperty(List<ArrayList> setList) {
        Object[] temp = new Object[4];
        setTableModelForProperty();
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();

        for (ArrayList list : setList) {
            temp[0] = list.get(0);
            temp[1] = list.get(1);
            temp[2] = list.get(2);
            temp[3] = list.get(3);

            model.addRow(temp);
        }
    }

    /**
     * Naplenie tabulky vstupom, ktory je jednou nehnutelnostou
     */
    private void fillTableProperty(List<ArrayList> property) {
        Object[] temp = new Object[4];
        setTableModelForProperty();
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();
        ArrayList<Object> propertyInfo = property.get(property.size() - 1);

        temp[0] = propertyInfo.get(0);
        temp[1] = propertyInfo.get(1);
        temp[2] = propertyInfo.get(2);
        temp[3] = propertyInfo.get(3);

        model.addRow(temp);
    }

    /**
     * Naplenie tabulky vstupom, ktory je polom katastrov
     */
    private void fillTableCadaster(List<ArrayList> setList) {
        Object[] temp = new Object[2];
        setTableModelForCadster();
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();

        for (ArrayList list : setList) {
            temp[0] = list.get(0);
            temp[1] = list.get(1);

            model.addRow(temp);
        }
    }

    /**
     * Naplenie tabulky vstupom, ktory je jednym katastrom
     */
    private void fillTableCadaster(ArrayList<Object> setList) {
        Object[] temp = new Object[2];
        setTableModelForCadster();
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();

        temp[0] = setList.get(0);
        temp[1] = setList.get(1);

        model.addRow(temp);

    }

    /**
     * Naplenie tabulky vstupom, ktory je pole lsitov valstnictva
     */
    private void fillListTablePropertyList(List<ArrayList> setList) {
        Object[] temp = new Object[4];
        setTableModelForPropertyList();
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();

        for (ArrayList list : setList) {
            temp[0] = list.get(0);
            temp[1] = list.get(1);
            temp[2] = list.get(2);
            temp[3] = list.get(3);

            model.addRow(temp);
        }
    }

    /**
     * Naplenie tabulky vstupom, ktory je jednym listom vlastnictva
     */
    private void fillTablePropertyList(List<ArrayList> setList) {
        Object[] temp = new Object[4];
        setTableModelForPropertyList();
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();

        temp[0] = setList.get(0).get(1);
        temp[1] = setList.get(0).get(2);
        temp[2] = setList.get(1).size();
        temp[3] = setList.get(3).size();

        model.addRow(temp);
    }

    /**
     * Naplenie tabulky vstupom, ktory je jednou osobou
     */
    private void fillTablePerson(List<Object> setList) {
        Object[] temp = new Object[6];
        setTableModelForPerson();
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();

        temp[0] = setList.get(0);
        temp[1] = setList.get(1);
        temp[2] = setList.get(2);
        temp[3] = setList.get(3);
        temp[4] = setList.get(4);
        temp[5] = setList.get(5);

        model.addRow(temp);
    }

    /**
     * Naplenie tabulky vstupom, ktory je pole osob
     */
    private void fillListTablePerson(List<ArrayList> setList) {
        Object[] temp = new Object[6];
        setTableModelForPerson();
        DefaultTableModel model = (DefaultTableModel) outputTable.getModel();

        for (ArrayList list : setList) {
            temp[0] = list.get(0);
            temp[1] = list.get(1);
            temp[2] = list.get(2);
            temp[3] = list.get(3);
            temp[4] = list.get(4);
            temp[5] = list.get(5);

            model.addRow(temp);
        }
    }

    /**
     * Pripravenie struktury tabulky na vypis katastrov
     */
    private void setTableModelForCadster() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(0);
        model.addColumn("Cadaster ID");
        model.addColumn("Name");
        outputTable.setModel(model);
    }

    /**
     * Pripravenie struktury tabulky na vypis nehnutelnosti
     */
    private void setTableModelForProperty() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(0);
        model.addColumn("Cadaster");
        model.addColumn("Property ID");
        model.addColumn("Address");
        model.addColumn("Property list ID");
        outputTable.setModel(model);
    }

    /**
     * Pripravenie struktury tabulky na vypis listov vlastnictva
     */
    private void setTableModelForPropertyList() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(0);
        model.addColumn("Cadaster");
        model.addColumn("Property list ID");
        model.addColumn("Properties count");
        model.addColumn("Owners count");
        outputTable.setModel(model);
    }

    /**
     * Pripravenie struktury tabulky na vypis oboby
     */
    private void setTableModelForPerson() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(0);
        model.addColumn("Person ID");
        model.addColumn("Name");
        model.addColumn("Surname");
        model.addColumn("Cadaster");
        model.addColumn("Property ID");
        model.addColumn("Property address");
        outputTable.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FindCadsterByNameButton;
    private javax.swing.JButton addCadasterButton;
    private javax.swing.JTextField addCadasterTextField;
    private javax.swing.JTextField addNameField;
    private javax.swing.JButton addPersonButton;
    private javax.swing.JButton addPersonToPropListButton1;
    private javax.swing.JTextField addPersonToPropListCadasterIDField1;
    private javax.swing.JTextField addPersonToPropListOwnerPartField1;
    private javax.swing.JTextField addPersonToPropListPersonIDField1;
    private javax.swing.JTextField addPersonToPropListPropListID1;
    private javax.swing.JTextField addPropertyAddressField;
    private javax.swing.JButton addPropertyButton;
    private javax.swing.JTextField addPropertyCatasterField;
    private javax.swing.JTextField addPropertyListAddressField;
    private javax.swing.JButton addPropertyListButton;
    private javax.swing.JTextField addPropertyListCadasterIDField;
    private javax.swing.JTextField addPropertyListPersonIDField;
    private javax.swing.JTextField addPropertyListPropertyIDField;
    private javax.swing.JTextField addPropertyPropertyListIDField;
    private javax.swing.JTextField addSurnameField;
    private javax.swing.JTextField cadasterAddPersonField;
    private javax.swing.JTextField cadasterNumber;
    private javax.swing.JTextField changeOwnerActualOwnerIDFIeld;
    private javax.swing.JTextField changeOwnerBackUpPropListIDField;
    private javax.swing.JButton changeOwnerButton;
    private javax.swing.JTextField changeOwnerCadasterField;
    private javax.swing.JTextField changeOwnerNewOwnerIDFIeld;
    private javax.swing.JTextField changeOwnerPropListIDField;
    private javax.swing.JButton changePermAddressButton;
    private javax.swing.JTextField changePermAddressCadasterField;
    private javax.swing.JTextField changePermAddressPerosnIDField;
    private javax.swing.JTextField changePermAddressPropIDField;
    private javax.swing.JTextField deleteCadasterBackUpField;
    private javax.swing.JButton deleteCadasterButton;
    private javax.swing.JTextField deleteCadasterIDField;
    private javax.swing.JTextField deletePersonBackUpPersonIDField;
    private javax.swing.JButton deletePersonButton;
    private javax.swing.JTextField deletePersonPersonIDField;
    private javax.swing.JButton deletePropertyButton;
    private javax.swing.JTextField deletePropertyCadasterIField;
    private javax.swing.JTextField deletePropertyListBackUpIDField;
    private javax.swing.JButton deletePropertyListButton;
    private javax.swing.JTextField deletePropertyListCadasterIDField;
    private javax.swing.JTextField deletePropertyListPropListIDField;
    private javax.swing.JTextField deletePropertyPropertyIDField;
    private javax.swing.JTextField deletePropertyPropertyListIDField;
    private javax.swing.JTextField findCadasterByIDField;
    private javax.swing.JTextField findCadasterByNameField;
    private javax.swing.JButton findCadsterByIDButton;
    private javax.swing.JButton findPermAddressOfPersonButton;
    private javax.swing.JTextField findPermAddressOfPersonID;
    private javax.swing.JButton findPermAddressOfPropertyButton;
    private javax.swing.JTextField findPermAddressOfPropertyCadFIeld;
    private javax.swing.JTextField findPermAddressOfPropertyPropIDField;
    private javax.swing.JButton findPropButton;
    private javax.swing.JTextField findPropCadaster;
    private javax.swing.JTextField findPropIDNum;
    private javax.swing.JButton findPropOwnerButton;
    private javax.swing.JTextField findPropertyCadasterOfOwner;
    private javax.swing.JButton findPropertyListButton;
    private javax.swing.JTextField findPropertyListCadaster;
    private javax.swing.JTextField findPropertyListPLID;
    private javax.swing.JTextField findPropertyOwnerIDOfOwner;
    private javax.swing.JButton generate;
    private javax.swing.JLabel informField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextField loadTextField;
    private javax.swing.JTextField maxPerson;
    private javax.swing.JTextField maxProp;
    private javax.swing.JTextField maxPropList;
    private javax.swing.JTextField minPerson;
    private javax.swing.JTextField minProp;
    private javax.swing.JTextField minPropList;
    private javax.swing.JTable outputTable;
    private javax.swing.JTextField propAddPersonField;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField saveFileName;
    private javax.swing.JButton showAllPeopleButton;
    // End of variables declaration//GEN-END:variables
}
